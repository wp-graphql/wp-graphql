{
  "description": "WPGraphQL is a WordPress plugin that adds a /graphql endpoint to the WordPress site and defines a GraphQL Schema based on internal WordPress registries.",
  "file_patterns": ["**/*"],
  "rules": {
    "frameworks_and_technologies": {
      "framework": "wordpress",
      "language": "php",
      "package_manager": "composer",
      "testing_framework": "phpunit (codeception, wp-graphql-testcase)",
      "coding_standards": "phpcs",
      "api": "graphql"
    },
    "key_concepts": [
      {
        "name": "GraphQL Schema",
        "description": "The structure that defines the types, queries, and mutations available in the WPGraphQL API"
      },
      {
        "name": "WordPress Registries",
        "description": "Internal WordPress systems that store information about post types, taxonomies, and settings"
      },
      {
        "name": "Resolvers",
        "description": "Functions that determine how to fetch and return data for specific GraphQL fields"
      },
      {
        "name": "Model Layer",
        "description": "Classes that handle access control and data preparation before resolution"
      },
      {
        "name": "GraphiQL IDE",
        "description": "An interactive development environment for testing GraphQL queries"
      }
    ],
    "file_patterns": [
      {
        "pattern": "src/Admin/*.php",
        "description": "WordPress admin interface implementations"
      },
      {
        "pattern": "src/Connection/*.php",
        "description": "Classes handling GraphQL connections and pagination"
      },
      {
        "pattern": "src/Data/*.php",
        "description": "Data manipulation and transformation classes"
      },
      {
        "pattern": "src/Model/*.php",
        "description": "Model classes that handle data access and authorization"
      },
      {
        "pattern": "src/Mutation/*.php",
        "description": "Classes defining GraphQL mutations"
      },
      {
        "pattern": "src/Registry/*.php",
        "description": "Classes for registering types and fields"
      },
      {
        "pattern": "src/Server/*.php",
        "description": "Validation Rules and other configuration for the GraphQL Server"
      },
      {
        "pattern": "src/Type/*.php",
        "description": "GraphQL type definitions"
      },
      {
        "pattern": "src/Utils/*.php",
        "description": "Utility classes and helper functions"
      },
      {
        "pattern": "tests/**/*.php",
        "description": "PHPUnit test files"
      },
      {
        "pattern": "access-functions.php",
        "description": "Global access functions"
      },
      {
        "pattern": "docs/*.md",
        "description": "User documentation for the plugin"
      },
      {
        "pattern": "cli/*.php",
        "description": "WP-CLI commands for interacting with WPGraphQL using WP-CLI"
      },
      {
        "pattern": "phpstan/*.php",
        "description": "Stubs for use with phpstan for static analysis"
      },
      {
        "pattern": "packages/**/*.js",
        "description": "JavaScript packages that make up the GraphiQL IDE"
      },
      {
        "pattern": ".wordpress-org/",
        "description": "Files used for building and deploying the plugin to WordPress.org"
      }
    ],
    "dependencies": [
      {
        "name": "webonyx/graphql-php",
        "description": "Core GraphQL PHP implementation"
      },
      {
        "name": "ivome/graphql-relay-php",
        "description": "Relay specification implementation"
      },
      {
        "name": "phpunit/phpunit",
        "description": "Testing framework"
      },
      {
        "name": "squizlabs/php_codesniffer",
        "description": "Code style checking"
      },
      {
        "name": "phpstan/phpstan",
        "description": "Static analysis tool"
      },
      {
        "name": "wp-coding-standards/wpcs",
        "description": "WordPress Coding Standards"
      }
    ],
    "common_code_patterns": {
      "registering_graphql_type": "add_action( 'graphql_register_types', function( $type_registry ) {\n\n    register_graphql_object_type( 'TypeName', [\n        'fields' => [\n            'fieldName' => [\n                'type' => 'String',\n                'resolve' => function($source, $args, $context, $info) {\n                    // Resolution logic\n                }\n            ]\n        ]\n    ]);\n\n});",
      "registering_graphql_field": "add_action( 'graphql_register_types', function( $type_registry ) {\n\n    register_graphql_field( 'TypeName', 'FieldName', [\n        'description' => __( 'Description of the field', 'your-textdomain' ),\n        'type' => 'String',\n        'resolve' => function() {\n            // interact with the WordPress database, or even an external API or whatever.\n            return 'value retrieved from WordPress, or elsewhere';\n        }\n    ]);\n\n});",
      "deprecation_notice": "_deprecated_argument( __METHOD__, '@since next-version', 'Deprecation message explaining what to use instead.' );"
    },
    "coding_standards": {
      "version_placeholders": {
        "description": "When using WordPress deprecation functions, use '@since next-version' as the version placeholder",
        "valid_formats": ["@since next-version", "@next-version"],
        "preferred_format": "@since next-version",
        "applicable_functions": ["_deprecated_argument", "_deprecated_function", "_deprecated_file", "_deprecated_hook", "_deprecated_class", "_deprecated_constructor", "_doing_it_wrong"]
      }
    },
    "key_directories": [
      {
        "directory": "src/",
        "description": "Core plugin source code"
      },
      {
        "directory": "includes/",
        "description": "Plugin includes and utilities"
      },
      {
        "directory": "tests/",
        "description": "Test files"
      },
      {
        "directory": "docs/",
        "description": "Documentation"
      },
      {
        "directory": "languages/",
        "description": "Translation files"
      },
      {
        "directory": ".github/",
        "description": "Files used for interacting with GitHub"
      },
      {
        "directory": ".wordpress-org/",
        "description": "Files used for building and deploying the plugin to WordPress.org"
      },
      {
        "directory": "build/",
        "description": "Contains the built assets for the GraphiQL IDE"
      },
      {
        "directory": "bin/",
        "description": "Contains scripts used in CI"
      },
      {
        "directory": "docker/",
        "description": "Contains configuration for running WPGraphQL in Docker"
      },
      {
        "directory": "img",
        "description": "Contains images used in documentation"
      },
      {
        "directory": "phpstan/",
        "description": "PHPStan configuration and stubs"
      }
    ],
    "important_files": [
      {
        "file": "wp-graphql.php",
        "description": "Main plugin file"
      },
      {
        "file": "composer.json",
        "description": "Dependency management"
      },
      {
        "file": ".phpcs.xml.dist",
        "description": "PHP CodeSniffer configuration"
      },
      {
        "file": "phpunit.xml.dist",
        "description": "PHPUnit configuration"
      },
      {
        "file": "access-functions.php",
        "description": "Global access functions"
      },
      {
        "file": "phpstan.neon.dist",
        "description": "PHPStan configuration"
      },
      {
        "file": "docker-compose.yml",
        "description": "Docker environment configuration"
      },
      {
        "file": ".wordpress-org/blueprints/blueprint.json",
        "description": "Blueprint for running WPGraphQL in WordPress Playground, a WASM environment that runs WordPress fully in the browser"
      }
    ],
    "debug_tools": [
      {
        "name": "GraphQL Debug Mode",
        "description": "Enable via WPGraphQL Settings or define('GRAPHQL_DEBUG', true)"
      },
      {
        "name": "Query Logs",
        "description": "Logs the SQL queries to fulfil a graphql request. Requires Query Monitor to be active. Enabled via WPGraphQL Settings and available in GraphiQL when debug mode is enabled"
      },
      {
        "name": "Query Tracing",
        "description": "Shows trace data for resolvers (i.e. timing for execution). Enabled via WPGraphQL Settings and available in GraphiQL when debug mode is enabled"
      }
    ]
  }
}