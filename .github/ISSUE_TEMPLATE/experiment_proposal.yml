name: Experiment Proposal
description: Propose a new experiment for WPGraphQL core
body:
  - type: markdown
    attributes:
      value: >-
        Thank you for proposing an experiment for WPGraphQL core!

        Before submitting your proposal, please review the [Contributing Experiments Guide](https://github.com/wp-graphql/wp-graphql/blob/develop/docs/experiments-contributing.md) to understand the process and requirements.

        **Important**: Experiments are for proposed core features that need real-world validation. They are not suitable for plugin-specific features, bug fixes, or minor enhancements.

        Please make sure to search [existing issues](https://github.com/wp-graphql/wp-graphql/issues) to avoid duplicates.
  - type: input
    attributes:
      label: Experiment Title
      description: A clear, concise title for your experiment (e.g., "Email Address Scalar")
      placeholder: Email Address Scalar
    validations:
      required: true
  - type: textarea
    attributes:
      label: Executive Summary
      description: >-
        Provide a high-level overview of the experiment:
        - What it does and why it matters
        - Key benefits or strategic value
        - How it differentiates WPGraphQL (if applicable)
        - What makes this foundational for future work (if applicable)
      placeholder: >-
        This experiment introduces an EmailAddress scalar type to WPGraphQL, serving as a foundational piece 
        for establishing WPGraphQL's competitive advantage through custom scalar types. While the immediate 
        benefit is validated email fields, the strategic value includes reduced technical debt, enhanced tooling, 
        and establishing patterns for future scalars (Date, URL, JSON, etc.).
    validations:
      required: true
  - type: textarea
    attributes:
      label: Problem Statement
      description: >-
        Describe the problem your experiment aims to solve. Be specific about:
        - Who experiences this problem
        - When they experience it  
        - Why current solutions are inadequate
      placeholder: >-
        String types don't validate email addresses, leading to invalid data being stored. 
        Developers must validate emails in their own code, creating inconsistency across implementations.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Proposed Solution
      description: >-
        Explain what your experiment will do:
        - What new types/fields/features it adds
        - How users will interact with it
        - What changes to the schema
        - Include schema changes or code examples if helpful
      placeholder: >-
        Add an EmailAddress scalar type that validates email format using WordPress's is_email() function.
        
        Schema Changes:
        ```graphql
        scalar EmailAddress @specifiedBy(url: "...")
        ```
        
        Usage:
        ```php
        register_graphql_field('MyType', 'email', [
            'type' => 'EmailAddress',
        ]);
        ```
    validations:
      required: true
  - type: textarea
    attributes:
      label: Hypothesis
      description: >-
        State what you believe to be true that this experiment will validate. What assumption are you testing?
        A good hypothesis is specific, testable, and falsifiable.
      placeholder: >-
        "The WPGraphQL community wants email fields to use a validated EmailAddress scalar type instead of generic String types, 
        and they find our proposed deprecation strategy acceptable for migrating existing fields."
    validations:
      required: true
  - type: textarea
    attributes:
      label: Why an Experiment?
      description: >-
        Explain why this should be an experiment rather than a direct core addition:
        - Is it a breaking change?
        - Does it need validation at scale?
        - Are there design decisions that need community input?
        - Are there tradeoffs/friction that need validation?
        - Does this establish patterns that need real-world testing?
      placeholder: >-
        This introduces server-specific custom scalars which have friction (learning curve, tooling fragmentation) 
        compared to universal GraphQL types. We need to validate that the benefits (semantic types, validation, 
        reduced tech debt) outweigh the friction. This also establishes patterns for future scalars that need 
        community validation.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Tradeoffs and Considerations
      description: >-
        What are the downsides, limitations, or tradeoffs of this approach? 
        Be honest about friction, limitations, or concerns that need validation.
        This helps set appropriate expectations and validates whether the value outweighs the costs.
      placeholder: >-
        Custom scalars introduce server-specific friction:
        - Not universal across GraphQL APIs (unlike core types)
        - Requires server-specific tooling enhancements
        - Learning curve for developers across multiple APIs
        - Code generators may need server-specific configuration
        
        We need to validate that the benefits outweigh these tradeoffs.
  - type: textarea
    attributes:
      label: Implementation Plan
      description: >-
        Outline your approach (use checkboxes for tasks):
      placeholder: >-
        - [ ] Create EmailAddressScalarExperiment class
        - [ ] Register EmailAddress scalar type
        - [ ] Update User.email field type
        - [ ] Write comprehensive tests
        - [ ] Document usage and limitations
    validations:
      required: true
  - type: textarea
    attributes:
      label: Success Criteria
      description: >-
        How will we know if this experiment should graduate?
      placeholder: >-
        - Positive feedback from at least 5 production users
        - No major bugs after 2 releases
        - Performance impact < 5ms per query
        - Community agrees validation rules are appropriate
    validations:
      required: true
  - type: textarea
    attributes:
      label: Migration Plan
      description: >-
        If this graduates, how will we handle the breaking change?
      placeholder: >-
        - Document the String → EmailAddress change
        - Provide examples of updating queries
        - Consider a transition period with both types
    validations:
      required: true
  - type: textarea
    attributes:
      label: Open Questions
      description: >-
        What needs to be decided?
      placeholder: >-
        - Should we support custom validation rules via filter?
        - Should we validate on serialize, parseValue, or both?
        - Should other fields (Comment.authorEmail) also use this scalar?
  - type: textarea
    attributes:
      label: Testing Examples
      description: >-
        Provide practical examples for how to test this experiment:
        - Code snippets for registering test fields
        - Example queries/mutations
        - What to verify
      placeholder: >-
        ```php
        // Test field registration
        register_graphql_field('RootQuery', 'testEmail', [
            'type' => 'EmailAddress',
            'resolve' => fn() => 'test@example.com',
        ]);
        ```
        
        Test queries:
        - Query testEmail → should return valid email
        - Mutation with invalid email → should return validation error
  - type: textarea
    attributes:
      label: Feedback Requested
      description: >-
        What specific feedback would help?
      placeholder: >-
        - Does this solve a real problem for you?
        - Are there edge cases we're missing?
        - Would this break your existing implementation?
        - Do the benefits outweigh any friction/tradeoffs?
  - type: textarea
    attributes:
      label: Related Links
      description: >-
        Links to related PRs, discussions, documentation, or other proposals
      placeholder: >-
        - PR #1234: Original implementation
        - [WPGraphQL vs WP REST API](https://www.wpgraphql.com/docs/wpgraphql-vs-wp-rest-api)
        - Related experiment: "Email Address Scalar Fields"
  - type: textarea
    attributes:
      label: Implementation Status (if already started)
      description: >-
        If you've already started implementation, provide status updates:
        - What's complete
        - What's in progress
        - Branch name
        - Test coverage
      placeholder: >-
        ✅ Complete:
        - Scalar implementation
        - Tests (59 tests, 194 assertions)
        - Documentation
        
        ⏳ In Progress:
        - Community feedback gathering
        
        Branch: `experiment/email-scalar`
        Test Coverage: 100% for scalar validation logic
  - type: checkboxes
    attributes:
      label: Please confirm that you have searched existing issues in the repo.
      description: >-
        You can do this by searching https://github.com/wp-graphql/wp-graphql/issues.
      options:
        - label: 'Yes, I have searched for similar experiment proposals'
          required: true
  - type: checkboxes
    attributes:
      label: Please confirm this is appropriate for an experiment.
      description: >-
        Experiments are for proposed core features that need validation. They are not for plugin-specific features, bug fixes, or minor enhancements.
      options:
        - label: 'Yes, this is a proposed core feature that needs real-world validation'
          required: false
        - label: 'This involves breaking changes that need community feedback'
          required: false
        - label: 'This is a controversial feature that needs community input'
          required: false
        - label: 'This is a performance improvement that needs testing at scale'
          required: false
