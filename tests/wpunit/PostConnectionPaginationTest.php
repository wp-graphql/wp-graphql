<?php

class PostConnectionPaginationTest extends \Codeception\TestCase\WPTestCase {

	public $current_time;
	public $current_date;
	public $current_date_gmt;
	public $created_post_ids;
	public $admin;
	public $subscriber;

	public function setUp(): void {
		parent::setUp();
		$this->admin            = $this->factory()->user->create(
			[
				'role' => 'administrator',
			]
		);
		$this->current_time     = strtotime( '- 1 day' );
		$this->current_date     = date( 'Y-m-d H:i:s', $this->current_time );
		$this->current_date_gmt = gmdate( 'Y-m-d H:i:s', $this->current_time );
		$this->admin            = $this->factory()->user->create(
			[
				'role' => 'administrator',
			]
		);
		$this->subscriber       = $this->factory()->user->create(
			[
				'role' => 'subscriber',
			]
		);

		$this->created_post_ids = $this->create_posts();
		WPGraphQL::clear_schema();
	}

	public function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function createPostObject( $args ) {

		/**
		 * Set up the $defaults
		 */
		$defaults = [
			'post_author'   => $this->admin,
			'post_content'  => 'Test page content',
			'post_excerpt'  => 'Test excerpt',
			'post_status'   => 'publish',
			'post_title'    => 'Test Title',
			'post_type'     => 'post',
			'post_date'     => $this->current_date,
			'has_password'  => false,
			'post_password' => null,
		];

		/**
		 * Combine the defaults with the $args that were
		 * passed through
		 */
		$args = array_merge( $defaults, $args );

		/**
		 * Create the page
		 */
		$post_id = $this->factory()->post->create( $args );

		/**
		 * Update the _edit_last and _edit_lock fields to simulate a user editing the page to
		 * test retrieving the fields
		 *
		 * @since 0.0.5
		 */
		update_post_meta( $post_id, '_edit_lock', $this->current_time . ':' . $this->admin );
		update_post_meta( $post_id, '_edit_last', $this->admin );

		/**
		 * Return the $id of the post_object that was created
		 */
		return $post_id;
	}

	/**
	 * Creates several posts (with different timestamps) for use in cursor query tests
	 *
	 * @param int $count Number of posts to create.
	 *
	 * @return array
	 */
	public function create_posts( $count = 25 ) {

		$alphabet = range( 'A', 'Z' );

		// Create posts
		$created_posts = [];
		for ( $i = 0; $i <= $count; $i ++ ) {
			// Set the date 1 minute apart for each post
			$date                = date( 'Y-m-d H:i:s', strtotime( "-1 day -{$i} minutes" ) );
			$created_posts[ $i ] = $this->createPostObject(
				[
					'post_type'   => 'post',
					'post_date'   => $date,
					'post_status' => 'publish',
					'post_title'  => $alphabet[ $i ],
				]
			);
		}

		return $created_posts;
	}

	public function testPaginateForwardAndBackward() {

		$query = '
		query FirstTwoPosts($first: Int, $after: String, $last: Int, $before: String) {
		  posts(first: $first, last: $last, before: $before, after: $after) {
		    pageInfo {
		      endCursor
		      startCursor
		      hasPreviousPage
		      hasNextPage
		    }
		    nodes {
		      databaseId
		      id
		      title
		    }
		  }
		}
		';

		codecept_debug( $this->created_post_ids );

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
			]
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		codecept_debug( $this->created_post_ids );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the most recent post
		$this->assertSame( $this->created_post_ids[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent post
		$this->assertSame( $this->created_post_ids[1], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $this->created_post_ids[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $this->created_post_ids[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 5th most recent post
		$this->assertSame( $this->created_post_ids[4], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent post
		$this->assertSame( $this->created_post_ids[5], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $this->created_post_ids[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $this->created_post_ids[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $this->created_post_ids[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $this->created_post_ids[1], $actual['data']['posts']['nodes'][1]['databaseId'] );
	}

	public function testPaginateForwardAndBackwardOrderedByTitle() {

		$posts_by_title = new WP_Query( [
			'post_type' => 'post',
			'orderby'   => 'title',
			'order'     => 'DESC',
			'fields'    => 'ids'
		] );

		codecept_debug( $posts_by_title->posts );

		$query = '
		query FirstTwoPosts($first: Int, $after: String, $last: Int, $before: String $where: RootQueryToPostConnectionWhereArgs ) {
		  posts(first: $first, last: $last, before: $before, after: $after where: $where ) {
		    pageInfo {
		      endCursor
		      startCursor
		      hasPreviousPage
		      hasNextPage
		    }
		    nodes {
		      databaseId
		      id
		      title
		    }
		  }
		}
		';

		codecept_debug( $posts_by_title->posts );

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'TITLE',
							'order' => 'DESC',
						]
					],
				],
			],
		] );

		$this->assertArrayNotHasKey( 'errors', $actual );

		codecept_debug( $posts_by_title->posts );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the most recent post
		$this->assertSame( $posts_by_title->posts[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent post
		$this->assertSame( $posts_by_title->posts[1], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'TITLE',
							'order' => 'DESC',
						]
					],
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $posts_by_title->posts[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $posts_by_title->posts[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'TITLE',
							'order' => 'DESC',
						]
					],
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 5th most recent post
		$this->assertSame( $posts_by_title->posts[4], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent post
		$this->assertSame( $posts_by_title->posts[5], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'TITLE',
							'order' => 'DESC',
						]
					],
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $posts_by_title->posts[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $posts_by_title->posts[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'TITLE',
							'order' => 'DESC',
						]
					],
				],
			]
		] );

		codecept_debug( $actual );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $posts_by_title->posts[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $posts_by_title->posts[1], $actual['data']['posts']['nodes'][1]['databaseId'] );

	}

	public function testPaginateForwardAndBackwardWithSearch() {

		$search_string = 'uniqueString';

		$args = [
			'post_type'   => 'post',
			'post_status' => 'publish',
			'post_author' => $this->admin,
			'post_title'  => $search_string
		];

		// Create 10 posts all with the $search_string as the title
		for ( $i = 0; $i <= 10; $i ++ ) {
			$date                = date( 'Y-m-d H:i:s', strtotime( "-1 day -{$i} minutes" ) );
			$args['post_date'] = $date;
			$this->factory()->post->create( $args );
		}

		$posts_search = new WP_Query( [
			'post_type' => 'post',
			's'    => $search_string,
			'fields' => 'ids'
		] );

		codecept_debug( $posts_search );

		codecept_debug( $posts_search->posts );

		$query = '
		query FirstTwoPosts($first: Int, $after: String, $last: Int, $before: String $where: RootQueryToPostConnectionWhereArgs ) {
		  posts(first: $first, last: $last, before: $before, after: $after where: $where ) {
		    pageInfo {
		      endCursor
		      startCursor
		      hasPreviousPage
		      hasNextPage
		    }
		    nodes {
		      databaseId
		      id
		      title
		    }
		  }
		}
		';

		codecept_debug( $posts_search->posts );

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
				'where'  => [
					'search' => $search_string,
				],
			],
		] );

		$this->assertArrayNotHasKey( 'errors', $actual );

		codecept_debug( $posts_search->posts );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the most recent post
		$this->assertSame( $posts_search->posts[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent post
		$this->assertSame( $posts_search->posts[1], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'search' => $search_string,
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $posts_search->posts[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $posts_search->posts[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'search' => $search_string,
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 5th most recent post
		$this->assertSame( $posts_search->posts[4], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent post
		$this->assertSame( $posts_search->posts[5], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
				'where'  => [
					'search' => $search_string,
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $posts_search->posts[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $posts_search->posts[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
				'where'  => [
					'search' => $search_string,
				],
			]
		] );

		codecept_debug( $actual );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $posts_search->posts[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $posts_search->posts[1], $actual['data']['posts']['nodes'][1]['databaseId'] );

	}

	public function testPaginateForwardAndBackwardWithPostInArgument() {

		$post_ids = $this->created_post_ids;
		shuffle( $post_ids );

		codecept_debug( $post_ids );

		$query = '
		query FirstTwoPosts($first: Int, $after: String, $last: Int, $before: String $where: RootQueryToPostConnectionWhereArgs ) {
		  posts(first: $first, last: $last, before: $before, after: $after where: $where ) {
		    pageInfo {
		      endCursor
		      startCursor
		      hasPreviousPage
		      hasNextPage
		    }
		    nodes {
		      databaseId
		      id
		      title
		    }
		  }
		}
		';

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
				'where'  => [
					'in' => $post_ids,
				],
			],
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the most recent post
		$this->assertSame( $post_ids[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent post
		$this->assertSame( $post_ids[1], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'in' => $post_ids,
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $post_ids[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $post_ids[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'in' => $post_ids,
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 5th most recent post
		$this->assertSame( $post_ids[4], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent post
		$this->assertSame( $post_ids[5], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
				'where'  => [
					'in' => $post_ids,
				],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $post_ids[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $post_ids[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		codecept_debug( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
				'where'  => [
					'in' => $post_ids,
				],
			],
			'decoded' => base64_decode( $actual['data']['posts']['pageInfo']['startCursor'] )
		]);

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
				'where'  => [
					'in' => $post_ids,
				],
			]
		] );

		codecept_debug( $actual );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $post_ids[0], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $post_ids[1], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => null,
				'where'  => [
					'in' => $post_ids,
				],
			]
		] );

		codecept_debug( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => null,
				'where'  => [
					'in' => $post_ids,
				],
			]
		] );

		codecept_debug( $actual );

		// assert that querying the last items with no cursor returns the last 2 items
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert it's the last item in the array. Since array keys start with 0, the last item is actually the count - 1
		$this->assertSame( $post_ids[ count( $post_ids ) - 2 ], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert it's the 2nd to last item in the array. Since array keys start with 0, the 2nd to last item is actually the count - 2
		$this->assertSame( $post_ids[ count( $post_ids ) - 1 ], $actual['data']['posts']['nodes'][1]['databaseId'] );

	}
}
