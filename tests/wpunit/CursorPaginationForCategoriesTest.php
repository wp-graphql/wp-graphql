<?php
class CursorPaginationForCategoriesTest extends \Codeception\TestCase\WPTestCase {

	public function setUp(): void {
		parent::setUp();
	}

	public function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * Creates several terms
	 *
	 * @param string $taxonomy
	 *
	 * @return array
	 */
	public function create_terms( $taxonomy = 'category' ) {

		$alphabet = range( 'A', 'Z' );

		// Create terms
		$created_terms = [];
		for ( $i = 0; $i <= count( $alphabet ) - 1; $i ++ ) {
			$created_terms[ $i ] = $this->factory()->term->create(
				[
					'taxonomy'   => $taxonomy,
					'name'   => $alphabet[ ($i ) ],
					'description' => $alphabet[ ($i ) ],
				]
			);
		}

		return $created_terms;

	}

	public function delete_terms( $term_ids ) {
		foreach( $term_ids as $term_id ) {
			wp_delete_term( $term_id, 'category' );
		}
	}

	public function get_nodes( $results ) {
		return $results['data']['categories']['nodes'];
	}

	public function get_edges( $results ) {
		return $results['data']['categories']['edges'];
	}

	public function testForwardPagination() {

		$category_ids = $this->create_terms( 'category' );
		$query = '
		query TestForwardPaginationForCategories( $first: Int $after: String $last:Int $before: String ) {
		  categories( first:$first last:$last after:$after before:$before) {
		    pageInfo {
		      hasNextPage
		      hasPreviousPage
		      startCursor
		      endCursor
		    }
		    edges {
		      cursor
		    }
		    nodes {
		      databaseId
		      name
		      description
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => null,
				'last' => null,
				'before' => null
			]
		]);

		$this->assertArrayNotHasKey( 'errors', $actual );
		codecept_debug( $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 0, 5 ) );

		// Page forward by 5
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => $actual['data']['categories']['pageInfo']['endCursor'],
				'last' => null,
				'before' => null
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 5, 5 ) );

		codecept_debug( [ 'endCursor' => base64_decode( $actual['data']['categories']['pageInfo']['endCursor'] ) ]);

		// Ask for the first 5 items, with a before cursor established
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => null,
				'last' => null,
				'before' => $actual['data']['categories']['pageInfo']['endCursor']
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( array_slice( $alphabet, 0, 5 ), $names );


		$after_cursor = $this->get_edges( $actual )[1]['cursor'];
		$before_cursor = $this->get_edges( $actual )[3]['cursor'];

		// Ask for the first 5 items, but within the bounds of a before and after cursor
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => $after_cursor,
				'last' => null,
				'before' => $before_cursor
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 2, 1 ) );

		// Ask for the first 5 items, but within the bounds of a before and after cursor
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => null,
				'after' => $after_cursor,
				'last' => 5,
				'before' => $before_cursor
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 2, 1 ) );

		$this->delete_terms( $category_ids );

	}

}
