<?php

class PageByUriTest extends \Tests\WPGraphQL\TestCase\WPGraphQLTestCase {

	public $page;
	public $user;

	public function setUp(): void {
		parent::setUp();

		$this->user = $this->factory()->user->create([
			'role'       => 'administrator',
			'user_login' => 'queryPagebyUriTestUser',
		]);

		$this->page = $this->factory()->post->create( [
			'post_type'   => 'page',
			'post_status' => 'publish',
			'post_title'  => 'Test PageByUriTest',
			'post_author' => $this->user,
		] );

		update_option( 'permalink_structure', '/posts/%postname%/' );
		create_initial_taxonomies();
		$GLOBALS['wp_rewrite']->init();
		flush_rewrite_rules();
		WPGraphQL::show_in_graphql();
	}

	public function tearDown(): void {
		$this->clearSchema();
		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
		wp_delete_post( $this->page, true );
		wp_delete_user( $this->user, false );

		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	function testPageByUriWithCustomPermalinks() {

		$query = '
		query GET_PAGE_BY_URI( $uri: ID! ) {
			page(id: $uri, idType: URI) {
				__typename
				id
				slug
				databaseId
				uri
			}
		}
		';

		$actual = $this->graphql([
			'query'     => $query,
			'variables' => [
				'uri' => '/non-existent-page',
			],
		]);

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertNull( $actual['data']['page'] );

		$actual = $this->graphql([
			'query'     => $query,
			'variables' => [
				'uri' => get_permalink( $this->page ),
			],
		]);

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertSame( ucfirst( get_post_type_object( 'page' )->graphql_single_name ), $actual['data']['page']['__typename'] );
		$this->assertSame( $this->page, $actual['data']['page']['databaseId'] );
		$this->assertSame( str_ireplace( home_url(), '', get_permalink( $this->page ) ), $actual['data']['page']['uri'] );
	}

	public function testQueryPageForPostsByUriReturnsNull() {


		$query = '
		query GetPageByUri($id:ID!) {
			page(id: $id, idType: URI) {
				__typename
			}
		}
		';

		$actual = $this->graphql([
			'query' => $query,
			'variables' => [
				'id' => '/' . get_post( $this->page )->post_name,
			]
		]);

		$this->assertQuerySuccessful( $actual, [
			$this->expectedField( 'page.__typename', 'Page' ),
		]);

		// set the page as the page_for_posts
		update_option( 'page_for_posts', $this->page );

		$actual = $this->graphql([
			'query' => $query,
			'variables' => [
				'id' => '/' . get_post( $this->page )->post_name,
			]
		]);

		$this->assertQuerySuccessful( $actual, [
			$this->expectedField( 'page', self::IS_NULL ),
		]);

	}

}
