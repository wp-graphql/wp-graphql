<?php

class CursorPaginationForUsersTest extends \Codeception\TestCase\WPTestCase {

	public function setUp(): void {
		parent::setUp();
	}

	public function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * Creates several users for use in cursor query tests
	 *
	 * @return array
	 */
	public function create_users() {

		$alphabet = range( 'A', 'Z' );

		// Create posts
		$created_users = [];
		for ( $i = 0; $i <= count( $alphabet ) - 1; $i ++ ) {
			// Set the date 1 minute apart for each post
			$date                = date( 'Y-m-d H:i:s', strtotime( "-1 day -{$i} minutes" ) );
			$created_users[ $i ] = $this->factory()->user->create(
				[
					'user_login'   => $alphabet[ ($i ) ],
					'user_nicename'   => $alphabet[ ($i ) ],
					'user_url' => 'http://'.$alphabet[ ($i ) ].'.com',
					'user_email'  => $alphabet[ ($i ) ] . '@example.com',
					'display_name' => $alphabet[ ($i ) ],
					'nickname' => $alphabet[ ($i ) ],
					'first_name' => $alphabet[ ($i ) ],
					'last_name' => $alphabet[ ($i ) ],
					'description' => $alphabet[ ($i ) ],
					'role' => 'administrator',
				]
			);
		}

		return $created_users;

	}

	public function delete_users( $user_ids ) {
		foreach( $user_ids as $user_id ) {
			wp_delete_user( $user_id );
		}
	}

	public function get_nodes( $results ) {
		return $results['data']['users']['nodes'];
	}

	public function get_edges( $results ) {
		return $results['data']['users']['edges'];
	}

	public function delete_all_users() {
		global $wpdb;
		$wpdb->query( "DELETE FROM {$wpdb->prefix}users" );
	}

	public function testForwardPagination() {

		$this->delete_all_users();
		$user_ids = $this->create_users();

		// Set the current user to an admin
		wp_set_current_user( $user_ids[0] );

		$query = '
		query TestForwardPaginationForPosts( $first: Int $after: String $last:Int $before: String ) {
		  users( first:$first last:$last after:$after before:$before) {
		    pageInfo {
		      hasNextPage
		      hasPreviousPage
		      startCursor
		      endCursor
		    }
		    edges {
		      cursor
		    }
		    nodes {
		      databaseId
		      name
		      email
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => null,
				'last' => null,
				'before' => null
			]
		]);

		$this->assertArrayNotHasKey( 'errors', $actual );
		codecept_debug( $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 0, 5 ) );

		// Page forward by 5
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => $actual['data']['users']['pageInfo']['endCursor'],
				'last' => null,
				'before' => null
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 5, 5 ) );

		codecept_debug( [ 'endCursor' => base64_decode( $actual['data']['users']['pageInfo']['endCursor'] ) ]);

		// Ask for the first 5 items, with a before cursor established
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => null,
				'last' => null,
				'before' => $actual['data']['users']['pageInfo']['endCursor']
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 0, 5 ) );

		// Ask for the first 5 items, but within the bounds of a before and after cursor
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'first' => 5,
				'after' => $this->get_edges( $actual )[1]['cursor'],
				'last' => null,
				'before' => $this->get_edges( $actual )[3]['cursor']
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$nodes = $this->get_nodes( $actual );
		$names = wp_list_pluck( $nodes, 'name' );

		$alphabet = range( 'A', 'Z' );
		$this->assertSame( $names, array_slice( $alphabet, 2, 1 ) );

		$this->delete_all_users( $user_ids );

	}
}
